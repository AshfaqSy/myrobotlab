package org.myrobotlab.codec;

import java.util.HashMap;

import org.myrobotlab.logging.Level;
import org.myrobotlab.logging.Logging;
import org.myrobotlab.logging.LoggingFactory;
import org.myrobotlab.service.Serial;
import org.myrobotlab.service.Arduino2;
import org.myrobotlab.service.Runtime;

// FIXME - use InputStream OutputStream 
// Stream encoders are more complicated than Document 
// with InputStream decoding - you need to deal with blocking / timeouts etc
// if the thing before it deals with it then you have a byte array - but it may not be complete

public class ArduinoMsgCodec implements Codec {

	transient static final HashMap<Integer,String> byteToMethod = new HashMap<Integer,String>();
	transient static final HashMap<String,Integer> methodToByte = new HashMap<String,Integer>();
	int byteCount = 0;
	int msgSize = 0;
	StringBuilder rest = new StringBuilder();
	
	
	static {
		/////// JAVA GENERATED DEFINITION BEGIN //////
		//<%=java.bindings.init%>
		///// JAVA GENERATED DEFINITION END //////
	}
	
	/**
	 * MAGIC_NUMBER|NUM_BYTES|FUNCTION|DATA0|DATA1|....|DATA(N)
	 * @throws CodecException 
	 */
	@Override
	public String decode(int newByte) throws CodecException {
		++byteCount;
		if (byteCount == 1 && newByte != Arduino2.MAGIC_NUMBER)
		{
			// reset - try again
			rest.setLength(0);
			byteCount = 0;
			throw new CodecException("bad magic number");
		}

		if (byteCount == 2)
		{
		   // get the size of message
		   // todo check msg < 64 (MAX_MSG_SIZE)
		   msgSize = newByte;
		}
		
		// set method
		if (byteCount == 3){
			rest.append(byteToMethod.get(newByte));
		}
		
		if (byteCount > 3) {
			// FIXME - for 
			rest.append(String.format("/%d", newByte));
		}

		// if received header + msg
		if (byteCount == 2 + msgSize)
		{
		  // msg done
		  byteCount = 0;
		  rest.append("\n");
		  return rest.toString();
		}
		
		// not ready yet
		// no msg :P should be null ???
		return "";
	}


	@Override
	public int encode(String data) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public String getCodecExt() {
		return "arduino";
	}
	

	public static void main(String[] args) {
		
		try {
			LoggingFactory.getInstance().configure();
			LoggingFactory.getInstance().setLevel(Level.INFO);
			
			Arduino2 arduino = (Arduino2)Runtime.start("arduino","Arduino2");
			Serial serial = arduino.getSerial();
			serial.record();
			serial.processRxByte(170);
			serial.processRxByte(3);
			serial.processRxByte(7);
			serial.processRxByte(9);
			serial.processRxByte(1);
			
		} catch (Exception e) {
			Logging.logException(e);
		}
		
	}


}
